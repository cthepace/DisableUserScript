<#
Written by: Dipesh Bhattarai
#>
[cmdletbinding(DefaultParameterSetName="FilterUsingName")] 
   Param(
        [Parameter(Mandatory=$true,ParameterSetName="FilterUsingName",Position=0)]
        [string]$FirstName,
        [Parameter(Mandatory=$true,ParameterSetName="FilterUsingName",Position=1)]
        [string]$Lastname,
        [Parameter(Mandatory=$true,ParameterSetName="FilterUsingLogin",Position=0)]
        [string]$LoginName,
	[boolean]$isadmin,
        [string]$OOOExternal=" no longer work with hall and prior. Contact DON/Manager for any queries.",
        [string]$OOOInternal=" no longer work with hall and prior. Contact DON/Manager for any queries.",
        [string]$OOOforwardaddress
        )#end of param

cls

function Remove-UserGroups
{
	$membership=@()
	$date=get-date
	$ADserver = (Get-ADDomainController).Name
	$psExchangeConfigName = 'microsoft.exchange'
	$psExchangeConnURI = 'http://dc1exch1.hallprior-agedcare.com.au/powershell'
	$exchangeCredential = $Null
	$moveto=Get-ADOrganizationalUnit -filter "name -eq 'ToBeArchived'"
    $user =$args[0]
  

    Write-host "User's identity is $user"
	$usergrp = Get-ADPrincipalGroupMembership -Identity $user.SamAccountName

	foreach($grp in $usergrp){
			if($grp.name -ne 'Domain Users'){
            $membership+= $grp.name+";`r`n"
            Remove-ADGroupMember -Identity $grp.name -Members $user -confirm:$false

            }
        }
        Write-host "$membership"

	if( $user.mail){
               

	    $sb = [ScriptBlock]::Create("Set-MailboxAutoReplyConfiguration $($user.SamAccountName) -AutoReplyState enabled -ExternalAudience all -InternalMessage '$OOOInternal' -ExternalMessage '$OOOExternal'")
            $result= Invoke-Command -ScriptBlock $sb -ConnectionUri $psExchangeConnURI -ConfigurationName $psExchangeConfigName			
         if($result){
            Write-host "AutoReply set for user $user.DisplayName"
            }

        
		}
    else{
			Write-host "User does not have mailbox enabled."
	   }

	#Write all group membership on notes section. ( to protect from accidental deletion)
	Set-aduser -Identity $user.SamAccountName -replace @{info="Account Disabled On $(get-date) `r`n $membership"; msExchHideFromAddressLists="TRUE"}
    Move-ADObject -identity $user.distinguishedName -TargetPath $moveto
	Disable-ADAccount -Identity $user.SamAccountName
}


$found=""

$filter="(SAMaccountName -notlike '*Admin' -and enabled -eq '$true') "
if($isadmin)
{
$filter="(enabled -eq '$true') "
}

if(!$LoginName ){
$FirstName+="*"
$lastName+="*"
$filter+="-and (GivenName -like '$firstname' -and Surname -like '$LastName') "
}

else{
    $LoginName+="*"
    $filter+="-and  SAMaccountName -like '$LoginName'"
    }


$usersfound=@()
$found=Get-ADUser -filter $filter -Properties *

if($found){
	$i=1;
	foreach($Users in $found){
			$usersfound+=New-Object -TypeName PSObject -Property @{
                SN=$i++
                Name=$Users.DisplayName
                Department=$Users.department
                AccountID= $Users.SAMaccountName
            }
	}
	if($usersfound.count -gt 1){	
		$usersfound|Select SN,Name,AccountID,Department|ft
		$choice= Read-Host -Prompt 'Enter the SN of the user that you want to delete'

		if([int]$choice -ge 1 -and [int]$choice -le ($usersfound.count)){
           
			$found[[int]$choice-1]|select DisplayName,Department,mail,whenCreated,Title,StreetAddress,State,Postalcode,info,DistinguishedName|fl
      
			$confirm =read-host "Are you sure you want to delete the following user? (y/n)"
			if($confirm.ToUpper() -eq "Y"-or $confirm.ToUpper() -eq "YES"){

				Remove-UserGroups $found[$choice-1]	
				
			}
			else{ 
			Read-Host "Press any key to quit"
			break
			}

		}
	}
	else{
	
	    Write-Host "Deleting following user..."
		$found|select DisplayName,Department,mail,whenCreated,Title,StreetAddress,State,Postalcode,info,DistinguishedName|fl
	    $confirm=(Read-host "Are you sure you want to delete the following user? (y/n)")    
		if($confirm.ToUpper() -eq "Y"-or $confirm.ToUpper() -eq "YES"){
			Remove-UserGroups $found
			
		}
	}
}
else{
		Read-host "User Not found..Press any key to quit.."
	}



